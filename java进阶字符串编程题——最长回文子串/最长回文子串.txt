给你一个字符串 s，找到 s 中最长的回文子串。

?


示例 1：

输入：s = "babad"
输出："bab"
解释："aba" 同样是符合题意的答案。

示例 2：

输入：s = "cbbd"
输出："bb"

示例 3：

输入：s = "a"
输出："a"

示例 4：

输入：s = "ac"
输出："a"


class Solution {
    public String longestPalindrome(String s) {
        int maxlen=0;
        int start=0;
        int end=0;
     for(int i=0;i<s.length();++i){
     int[]num1=maxWord(s,i,i-1,i+1);
     int[]num2=maxWord(s,i,i,i+1);
         if(maxlen<=num1[0]){
    maxlen=num1[0];
     start=num1[1];
     end=num1[2];
         }
         if(maxlen<num2[0]){
        maxlen=num2[0];
         start=num2[1];
         end=num2[2];
     }
     }
     return s.substring(start,end+1);
    }
    public int[] maxWord(String str,int i,int start,int end){
        if(start<0&&end>=str.length()){
         return new int[]{1,i,i};
        }
        int len=1; 
         if((start<0&&end<str.length())||(start>=0&&end>=str.length())||(start!=i&&str.charAt(start)!=str.charAt(end))){
    while(start>=0&&str.charAt(start)==str.charAt(i)){
     len++;
     start--;
    }
    while(end<str.length()&&str.charAt(end)==str.charAt(i)){
    len++;
    end++;
    }
    return new int[]{len,++start,--end};
     }
     if(start==i){
     len=0;
     }
     while(start!=-1&&end<str.length()&&str.charAt(start)==str.charAt(end)){
      len+=2;
      start--;
      end++;
     }
   return new int[]{len,++start,--end};
    }
}