请实现支持'?'and'*'.的通配符模式匹配
'?' 可以匹配任何单个字符。
'*' 可以匹配任何字符序列（包括空序列）。
返回两个字符串是否匹配
函数声明为：
bool isMatch(const char *s, const char *p)
下面给出一些样例：
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "d*a*b") → false
示例1
输入：
"ab","?*"
复制
返回值：
true
public class Solution {
    public boolean isMatch(String s, String p) {
        int size1=s.length();
        int size2=p.length();
        boolean[][]end=new boolean[size1+1][size2+1];
        end[0][0]=true;
        for(int i=1;i<=size2;++i){
            char x=p.charAt(i-1);
            if(x=='*'){
              end[0][i]=end[0][i-1];
            }
        }
        for(int i=1;i<=size1;++i){
            for(int j=1;j<=size2;++j){
                char x=s.charAt(i-1);
                char y=p.charAt(j-1);
                if(x==y||y=='?'){
                  end[i][j]=end[i-1][j-1];
                }else if(y=='*'){
                  end[i][j]=end[i][j-1]||end[i-1][j-1]||end[i-1][j];
                }else{
                  end[i][j]=false;
                }
               }
        }
        return end[size1][size2];
    }
}
描述
给定两个字符串str1和str2，输出两个字符串的最长公共子序列。如果最长公共子序列为空，则返回"-1"。目前给出的数据，仅仅会存在一个最长的公共子序列
示例1
输入：
"1A2C3D4B56","B1D23A456A"
复制
返回值：
"123456"
复制
示例2
输入：
"abc","def"
复制
返回值：
"-1"
复制
示例3
输入：
"abc","abc"
复制
返回值：
"abc"
import java.util.*;


public class Solution {
    /**
     * longest common subsequence
     * @param s1 string字符串 the string
     * @param s2 string字符串 the string
     * @return string字符串
     */
    public String LCS (String s1, String s2) {
        int len1=s1.length();
        int len2=s2.length();
        String[][]end=new String[len1+1][len2+1];
        for(int i=0;i<=len1;++i){
           for(int j=0;j<=len2;++j){
               if(i==0||j==0){
                 end[i][j]="";
               }else{
                 char x=s1.charAt(i-1);
                 char y=s2.charAt(j-1);
                 if(x==y){
                   end[i][j]=end[i-1][j-1]+x;
                 }else{
                 end[i][j]=end[i][j-1].length()>end[i-1][j].length()?end[i][j-1]:end[i-1][j];
                 }
               }
           }
        }
        if(end[len1][len2].equals("")){
          return "-1";
        }else{
          return end[len1][len2];
        }
    }
}
描述
假设你有一个数组，其中第\ i i 个元素是股票在第\ i i 天的价格。
你有一次买入和卖出的机会。（只有买入了股票以后才能卖出）。请你设计一个算法来计算可以获得的最大收益。
示例1
输入：
[1,4,2]
复制
返回值：
3
复制
示例2
输入：
[2,4,1]
复制
返回值：
2
import java.util.*;


public class Solution {
    /**
     * 
     * @param prices int整型一维数组 
     * @return int整型
     */
    public int maxProfit (int[] prices) {
        int max=0,min=prices[0];
        for(int i=1;i<prices.length;++i){
            if(min<=prices[i]){
              max=Math.max(max,prices[i]-min);
            }else{
              min=prices[i];
            }
        }
        return max;
    }
}