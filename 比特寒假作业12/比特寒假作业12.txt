给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，
那么整个数组都会变为升序排序。

请你找出符合题意的 最短 子数组，并输出它的长度。

?


示例 1：

输入：nums = [2,6,4,8,10,9,15]
输出：5

解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。

示例 2：

输入：nums = [1,2,3,4]
输出：0

示例 3：

输入：nums = [1]
输出：0


class Solution {
    public int findUnsortedSubarray(int[] nums) {
    int max=nums[0];
    int min=nums[nums.length-1];
    int i=1,j=nums.length-2;
    int right=-1;
    int left=0;
    while(i<nums.length&&j>=0){
    if(max>nums[i]){
    right=i;
    }else{
        max=nums[i];
    }
    if(min<nums[j]){
    left=j;
    }else{
        min=nums[j];
    }
    i++;
    j--;
    }
    return right-left+1;
    }
}
有效的运算符包括?+,?-,?*,?/?。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

?

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
?


示例?1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9

示例?2：

输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6

示例?3：

输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
class Solution {
    public int evalRPN(String[] tokens) {
     Stack<Integer>stack=new Stack<>();
     for(int i=0;i<tokens.length;++i){
      if(!tokens[i].equals("+")&&!tokens[i].equals("-")&&!tokens[i].equals("*")&&!tokens[i].equals("/")){
        int x=Integer.valueOf(tokens[i]);
        stack.push(x);
      }else{ 
        int a=stack.pop();
        int b=stack.pop();
       if(tokens[i].equals("+")){
        stack.push(a+b);
       }else if(tokens[i].equals("-")){
        stack.push(b-a);
       }else if(tokens[i].equals("*")){
        stack.push(a*b);
       }else{
         stack.push(b/a);   
       }
      }
     }
     return stack.pop();
    }
}