给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。


说明：本题中，我们将空字符串定义为有效的回文串。


示例 1:

输入: "A man, a plan, a canal: Panama"
输出: true

示例 2:

输入: "race a car"
输出: false


class Solution {
    public boolean isPalindrome(String s) {
    if(s==null||s.length()==0){
    return true;
    }
    int start=0;
    int end=s.length()-1;
    while(start<end){
    if(!Character.isLetterOrDigit(s.charAt(start))){
    start++;
    continue;
    }
    if(!Character.isLetterOrDigit(s.charAt(end))){
    end--;
    continue;
    }
    if(!(s.substring(start,start+1).equalsIgnoreCase(s.substring(end,end+1)))){
    return false;
    }
    start++;
    end--;
    }
    return true;
    }
}
给定一组字符，使用原地算法将其压缩。

压缩后的长度必须始终小于或等于原数组长度。


数组的每个元素应该是长度为1?的字符（不是 int 整数类型）。

在完成原地修改输入数组后，
返回数组的新长度。

?


进阶：
你能否仅使用O(1) 空间解决问题？

?


示例 1：

输入：
["a","a","b","b","c","c","c"]

输出：
返回 6 ，
输入数组的前 6 个字符应该是：["a","2","b","2","c","3"]


说明：
"aa" 被 "a2" 替代。"bb" 被 "b2" 替代。"ccc" 被 "c3" 替代。
class Solution {
    public int compress(char[] chars) {
    int i=0;
    StringBuilder str=new StringBuilder();
    while(i<chars.length){
    int count=0;
    char ch=chars[i];
    while(i<chars.length&&ch==chars[i]){
    count++;
    i++;
    }
    if(count==1){
    str.append(ch);
    }else{
        str.append(ch);
        str.append(count);
    }
    }
    for(i=0;i<str.length();++i){
     chars[i]=str.charAt(i);
    }
    return i;
    }
}