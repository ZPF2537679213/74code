有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，
且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。


省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。


给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，
而 isConnected[i][j] = 0 表示二者不直接相连。

返回矩阵中 省份 的数量。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-provinces
代码：
class Solution {
    int len=0;
    public int findCircleNum(int[][] isConnected) {
        for(int i=0;i<isConnected.length;++i){
            if(isConnected[i][i]>0){
                len++;
                 find(isConnected,i);
            }
        }
        return len;
    }
    public void find(int[][]isConnected,int i){
     if(i>=isConnected.length){
         return;
     } 
     isConnected[i][i]=-1;
     for(int j=0;j<isConnected[i].length;++j){
         if(isConnected[i][j]==1&&i!=j&&isConnected[i][j]>0){
             isConnected[i][j]=-1;
             isConnected[j][i]=-1;
             find(isConnected,j); 
         }
     }
    }
}
给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。

每条从根节点到叶节点的路径都代表一个数字：


例如，从根节点到叶节点的路径 1 -> 2 -> 3 表示数字 123 。

计算从根节点到叶节点生成的 所有数字之和 。

叶节点 是指没有子节点的节点。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sum-root-to-leaf-numbers
代码：
class Solution {
    public int sumNumbers(TreeNode root) {
        List<String>list=new ArrayList<>();
        load(root,"",list);
        int sum=0;
        for(String s:list){
            sum+=Integer.parseInt(s);
        }
        return sum;
    }
    public void load(TreeNode root,String str,List<String>list){
        if(root==null){
           return;
        }
        if(root.left==null&&root.right==null){
            str+=(root.val+"");
            list.add(str);
            return;
        }
       str+=(root.val+"");
       load(root.left,str,list);
       load(root.right,str,list);
    }
}