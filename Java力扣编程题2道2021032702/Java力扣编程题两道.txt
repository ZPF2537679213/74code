给定一个保存员工信息的数据结构，它包含了员工 唯一的 id ，重要度?和 直系下属的 id 。


比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。
那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。
注意虽然员工 3 也是员工 1 的一个下属，但是由于 并不是直系 下属，因此没有体现在员工 1 的数据结构中。


现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。

?


示例：


输入：[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1

输出：11

解释：
员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。
因此员工 1 的总重要度是 5 + 3 + 3 = 11 。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/employee-importance

代码：
class Solution {
    public int getImportance(List<Employee> employees, int id) {
     Employee emp=search(employees,id);
     int sum=0;
     if(emp.subordinates.size()==0){
         return emp.importance;
     }else{
         sum+=emp.importance;
         for(int x:emp.subordinates){
           sum+=getImportance(employees,x);
         }
         return sum;
     }
    }
    public Employee search(List<Employee>list,int id){
        for(Employee emp:list){
            if(id==emp.id){
                return emp;
            }
        }
        return null;
    }
}
给定一个 N 叉树，找到其最大深度。


最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。


N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree
输入：root = [1,null,3,2,4,null,5,6]
输出：3
代码：
class Solution {
    public int maxDepth(Node root) {
        if(root==null){
            return 0;
        }
        if(root.children.size()==0){
            return 1;
        }
        int maxlen=0;
        int len=root.children.size();
      for(Node node:root.children){
          maxlen=Math.max(maxlen,1+maxDepth(node));
      }
      return maxlen;
    }
}
