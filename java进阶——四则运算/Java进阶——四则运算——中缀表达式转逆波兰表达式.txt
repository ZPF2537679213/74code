题目描述
输入一个表达式（用字符串表示），求这个表达式的值。
保证字符串中的有效字符包括[‘0’-‘9’],‘+’,‘-’, ‘*’,‘/’ ,‘(’， ‘)’,‘[’, ‘]’,‘{’ ,‘}’。且表达式一定合法。
输入描述:
输入一个算术表达式
输出描述:
得到计算结果
示例1
输入
3+2*{1+2*[-4/(8-6)+7]}
输出
25
代码：
import java.util.*;
public class Main{
    public static void main(String[]args){
        Scanner input=new Scanner(System.in);
        Stack<Character>stack1=new Stack<>();
        Stack<String>stack2=new Stack<>();
        Stack<String>stack3=new Stack<>();
        String str=input.next();
        str=str.replace("{","(");
        str=str.replace("[","(");
        str=str.replace("]",")");
        str=str.replace("}",")");
        for(int i=0;i<str.length();++i){
            char ch=str.charAt(i);
            if(ch=='('){
                stack1.push(ch);
            }else if(ch=='*'||ch=='/'){
                if(stack1.isEmpty()||stack1.peek()=='('||stack1.peek()=='+'||stack1.peek()=='-'){
                    stack1.push(ch);
                }else{
                    char x=stack1.pop();
                    stack2.push(x+"");
                    i--;
                }
            }else if(ch==')'){
                while(!stack1.isEmpty()&&stack1.peek()!='('){
                    char x=stack1.pop();
                    stack2.push(x+"");
                }
                if(!stack1.isEmpty()){
                    stack1.pop();
                }
            }else if(ch>='0'&&ch<='9'){
                int j=i;
                while(i<str.length()&&Character.isDigit(str.charAt(i))){
                    i++;
                }
                String ss=str.substring(j,i);
                stack2.push(ss);
                i--;
            }else{
                if(ch=='-'&&str.charAt(i-1)=='('){
                    stack2.push(0+"");
                }
                if(stack1.isEmpty()||stack1.peek()=='('){
                    stack1.push(ch);
                }else{
                    char x=stack1.pop();
                    stack2.push(x+"");
                    i--;
                }
            }
        }
        while(!stack1.isEmpty()){
            char x=stack1.pop();
            stack2.push(x+"");
        }
        while(!stack2.isEmpty()){
            String ss=stack2.pop();
            stack3.push(ss);
        }
        while(!stack3.isEmpty()){
            String ss=stack3.pop();
            if(ss.equals("+")||ss.equals("-")||ss.equals("*")||ss.equals("/")){
                String s1=stack2.pop();
                String s2=stack2.pop();
                int y=Integer.valueOf(s1);
                int x=Integer.valueOf(s2);
                if(ss.equals("+")){
                    stack2.push((x+y)+"");
                }else if(ss.equals("-")){
                    stack2.push((x-y)+"");
                }else if(ss.equals("*")){
                     stack2.push((x*y)+"");
                }else{
                     stack2.push((x/y)+"");
                }
            }else{
                stack2.push(ss);
            }
        }
        System.out.println(stack2.peek());
    }
}