让我们一起来玩扫雷游戏！
给定一个代表游戏板的二维字符矩阵。 
‘M’ 代表一个未挖出的地雷，‘
E’ 代表一个未挖出的空方块，
‘B’ 代表没有相邻（上，下，左，右，和所有4个对角线）
地雷的已挖出的空白方块，数字（‘1’ 到 ‘8’）表示有多少地雷与这块已挖出的方块相邻，
‘X’ 则表示一个已挖出的地雷。

现在给出在所有未挖出的方块中（‘M’或者’E’）的下一个点击位置（行和列索引），
根据以下规则，返回相应位置被点击后对应的面板：
如果一个地雷（‘M’）被挖出，
游戏就结束了- 把它改为 ‘X’。
如果一个没有相邻地雷的空方块（‘E’）被挖出，
修改它为（‘B’），并且所有和其相邻的未挖出方块都应该被递归地揭露。

如果一个至少与一个地雷相邻的空方块（‘E’）被挖出，修改它为数字（‘1’到’8’），
表示相邻地雷的数量。
如果在此次点击中，若无更多方块可被揭露，则返回面板。

示例 1：

输入:
[[‘E’, ‘E’, ‘E’, ‘E’, ‘E’],
[‘E’, ‘E’, ‘M’, ‘E’, ‘E’],
[‘E’, ‘E’, ‘E’, ‘E’, ‘E’],
[‘E’, ‘E’, ‘E’, ‘E’, ‘E’]]

Click : [3,0]

输出:
[[‘B’, ‘1’, ‘E’, ‘1’, ‘B’],
[‘B’, ‘1’, ‘M’, ‘1’, ‘B’],
[‘B’, ‘1’, ‘1’, ‘1’, ‘B’],
[‘B’, ‘B’, ‘B’, ‘B’, ‘B’]]
代码：
class Solution {
    int[][]index=new int[][]{{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
    public char[][] updateBoard(char[][] board, int[] click) {
       int x=click[0];
       int y=click[1];
       if(x<0||x>=board.length||y<0||y>board[0].length){
           return board;
       }else if(board[x][y]=='M'){
           board[x][y]='X';
           return board;
       }else if(board[x][y]=='E'){
           int count=0;
           for(int i=0;i<index.length;++i){
             int nx=x+index[i][0];
             int ny=y+index[i][1];
             if(nx>=0&&nx<board.length&&ny>=0&&ny<board[0].length){
                 if(board[nx][ny]=='M'){
                     count++;
                 }
             }
           }
           if(count==0){
               board[x][y]='B';
           }else{
               board[x][y]=(char)(count+'0');
               return board;
           }
               for(int i=0;i<index.length;++i){
                  int nx=x+index[i][0];
                  int ny=y+index[i][1];
                  if(nx>=0&&nx<board.length&&ny>=0&&ny<board[0].length){
                    click[0]=nx;
                    click[1]=ny;
                    if(board[nx][ny]!='M'&&board[nx][ny]=='E'){
                        updateBoard(board,click);
                    }
                  }
               }
           return board;
       }else{
           return board;
       }
    }
}
给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），
使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

提醒一下，二叉搜索树满足下列约束条件：

节点的左子树仅包含键 小于 节点键的节点。

节点的右子树仅包含键 大于 节点键的节点。

左右子树也必须是二叉搜索树。
代码：
class Solution {
    int sum=0;
    public TreeNode convertBST(TreeNode root) {
        if(root==null){
            return null;
        }
       convertBST(root.right);
       root.val+=sum;
       sum=root.val;
       convertBST(root.left);
       return root; 
    }
}

