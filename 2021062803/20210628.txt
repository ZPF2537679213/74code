4. 寻找两个正序数组的中位数
给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。

 

示例 1：

输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2
示例 2：

输入：nums1 = [1,2], nums2 = [3,4]
输出：2.50000
解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5
示例 3：

输入：nums1 = [0,0], nums2 = [0,0]
输出：0.00000
示例 4：

输入：nums1 = [], nums2 = [1]
输出：1.00000
示例 5：

输入：nums1 = [2], nums2 = []
输出：2.00000
代码：
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length;
        int n=nums2.length;
        int[]num=new int[m+n];
        int i=0,j=0,k=0;
        while(i<m&&j<n){
            if(nums1[i]>nums2[j]){
                num[k++]=nums2[j++];
            }else{
                num[k++]=nums1[i++];
            }
        }
        while(i<m){
            num[k++]=nums1[i++];
        }
        while(j<n){
            num[k++]=nums2[j++];
        }
        double end=0;
        if((m+n)%2==0){
            end=(num[(m+n)/2]+num[(m+n)/2-1])/2.0;
        }else{
            end=num[(m+n)/2]*1.0;
        }
        return end;
    }
}
10. 正则表达式匹配
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

 
示例 1：

输入：s = "aa" p = "a"
输出：false
解释："a" 无法匹配 "aa" 整个字符串。
示例 2:

输入：s = "aa" p = "a*"
输出：true
解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3：

输入：s = "ab" p = ".*"
输出：true
解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4：

输入：s = "aab" p = "c*a*b"
输出：true
解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5：

输入：s = "mississippi" p = "mis*is*p*."
输出：false
 

提示：

0 <= s.length <= 20
0 <= p.length <= 30
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
保证每次出现字符 * 时，前面都匹配到有效的字符
代码：
class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][]end=new boolean[s.length()+1][p.length()+1];
        end[0][0]=true;
        for(int i=0;i<=s.length();++i){
            for(int j=1;j<=p.length();++j){
              if(p.charAt(j-1)=='*'){
                      end[i][j]=end[i][j-2]||(i>0&&(s.charAt(i-1)==p.charAt(j-2)||p.charAt(j-2)=='.')&&end[i-1][j]);
              }else{
                      end[i][j]=(i>0&&(s.charAt(i-1)==p.charAt(j-1)||p.charAt(j-1)=='.'))&&end[i-1][j-1];
              }
            }
        }
        return end[s.length()][p.length()];
    }
}