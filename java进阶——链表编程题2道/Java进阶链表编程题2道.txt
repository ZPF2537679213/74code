给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中?没有重复出现?的数字。


示例?1:

输入: 1->2->3->3->4->4->5
输出: 1->2->5

示例?2:

输入: 1->1->1->2->3
输出: 2->3


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii
代码：
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null||head.next==null){
            return head;
        }
       ListNode slow=head;
       ListNode fast=head.next;
       ListNode sslow=new ListNode(-1);
       sslow.next=head;
        while(fast!=null){
           if(slow.val!=fast.val){
               fast=fast.next;
               sslow=slow;
               slow=slow.next;
           }else{
               while(fast!=null&&fast.val==slow.val){
                   fast=fast.next;
               }
               if(slow==head){
                   head=fast;
               }
                sslow.next=fast;
                slow=fast;
                if(fast!=null){
                    fast=fast.next;
                }
           }
        }
        return head;
    }
}
给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。


本题中，一个高度平衡二叉树是指一个二叉树每个节点?的左右两个子树的高度差的绝对值不超过 1。


示例:

给定的有序链表： [-10, -3, 0, 5, 9],

一个可能的答案是：[0, -3, 9, -10, null, 5], 
它可以表示下面这个高度平衡二叉搜索树：


	0
     
               / \
  
            -3   9
  
             /   /
 
         -10  5


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree
代码：
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null){
            return null;
        }
        if(head.next==null){
            return new TreeNode(head.val);
        }
        ListNode slow=head;
        ListNode fast=head;
        ListNode p=null;
        while(fast!=null&&fast.next!=null){
            p=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        TreeNode root=new TreeNode(slow.val);
        TreeNode right=sortedListToBST(slow.next);
        p.next=null;
        TreeNode left=sortedListToBST(head);
        root.left=left;
        root.right=right;
        return root;
    }
}