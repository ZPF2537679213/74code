给定一个二维网格和一个单词，找出该单词是否存在于网格中。


单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。
同一个单元格内的字母不允许被重复使用。

?


示例:


board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]


给定 word = "ABCCED", 返回 true
给定 word = "SEE", 
返回 true
给定 word = "ABCB", 返回 false


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-search

代码：
class Solution {
    public boolean exist(char[][] board, String word) {
         for(int i=0;i<board.length;++i){
             for(int j=0;j<board[i].length;++j){
                if(myexist(board,0,word,i,j)){
                    return true;
                }
             }
         }
         return false;
    }
    public boolean myexist(char[][]board,int count,String word,int x,int y){
        if(count==word.length()){
            return true;
        }
          if(x<0||x>=board.length||y<0||y>=board[0].length||board[x][y]!=word.charAt(count)){
            return false;
          }
            board[x][y]='0';
          boolean flag=myexist(board,count+1,word,x+1,y)||myexist(board,count+1,word,x,y+1)||myexist(board,count+1,word,x,y-1)||myexist(board,count+1,word,x-1,y);
               board[x][y]=word.charAt(count);
            return flag;
    }
}
给定一个数字字符串 S，比如 S = "123456579"，我们可以将它分成斐波那契式的序列 [123, 456, 579]。


形式上，斐波那契式序列是一个非负整数列表 F，
且满足：

0 <= F[i] <= 2^31 - 1，（也就是说，每个整数都符合 32 位有符号整数类型）；

F.length >= 3；
对于所有的0 <= i < F.length - 2，都有 F[i] + F[i+1] = F[i+2] 成立。

另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。


返回从 S 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 []。

?


示例 1：


输入："123456579"

输出：[123,456,579]

示例 2：


输入: "11235813"

输出: [1,1,2,3,5,8,13]

示例 3：


输入: "112358130"

输出: []
解释: 这项任务无法完成。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence

代码：
class Solution {
    public List<Integer> splitIntoFibonacci(String S) {
         if(S==null||S.length()==0){
            return new ArrayList<>();
        }
            List<Integer>list=new ArrayList<>();
            splitInto(S,S,list,0);
            return list;
        }
    public boolean splitInto(String s,String S,List<Integer>list,int index){
         if(s==null||s.length()==0){
                if(S.length()==index&&list.size()>=3){
                 return true;
         }
         return false;
         }
        
        for(int i=0;i<s.length();++i){
            String str=s.substring(0,i+1);
            if(str.length()>1&&str.charAt(0)=='0'){
                break;
            } else{
               if(Long.valueOf(str)>Integer.MAX_VALUE){
                  break;
               }
                    int len=list.size();
               if(len>=2&&Integer.valueOf(str)>list.get(len-1)+list.get(len-2)){
                  break;
               }
                if(len<=1||list.get(len-1)+list.get(len-2)==Integer.valueOf(str)){
                    list.add(Integer.valueOf(str));
                     System.out.println(Integer.valueOf(str));
                    if(splitInto(s.substring(i+1,s.length()),S,list,index+str.length())){
                        return true;
                    }
                        list.remove(list.size()-1);
                }
            }
        }
        return false;
    }
    }

