给你二叉树的根结点 root ，请你设计算法计算二叉树的 垂序遍历 序列。


对位于?(row, col)?的每个结点而言，其左右子结点分别位于?(row + 1, col - 1)?和?(row + 1, col + 1) 。
树的根结点位于 (0, 0) 。


二叉树的 垂序遍历 从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，
形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，
则按结点的值从小到大进行排序。

返回二叉树的 垂序遍历 序列。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree
输入：root = [3,9,20,null,null,15,7]

输出：[[9],[3,15],[20],[7]]

解释：

列 -1 ：只有结点 9 在此列中。

列  0 ：只有结点 3 和 15 在此列中，按从上到下顺序。

列  1 ：只有结点 20 在此列中。

列  2 ：只有结点 7 在此列中。
 class Index{
     public TreeNode node;
     public int x;
     public int y;
     public Index(TreeNode node,int x,int y){
            this.node=node;
            this.x=x;
            this.y=y;
     }
 }
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
       List<List<Integer>>list=new ArrayList<>();
       LinkedList<Index>queen=new LinkedList<>();
        HashMap<Integer,List<Integer>>map=new HashMap<>();
       Index in=new Index(root,0,0);
       queen.offer(in);
       while(!queen.isEmpty()){
           int len=queen.size();
            HashMap<Integer,List<Integer>>m=new HashMap<>();
           while(len>0){
               Index node=queen.poll();
                if(!m.containsKey(node.y)){
                    m.put(node.y,new ArrayList<Integer>());
                }
                m.get(node.y).add(node.node.val);
                if(node.node.left!=null){
                    queen.offer((new Index(node.node.left,node.x+1,node.y-1)));
                }
                if(node.node.right!=null){
                    queen.offer((new Index(node.node.right,node.x+1,node.y+1)));
                }
                Collections.sort(m.get(node.y));
                len--;
           }
            for(int i=-256;i<256;++i){
               if(m.containsKey(i)){
                    if(!map.containsKey(i)){
                   map.put(i,new ArrayList<>());
               }
                map.get(i).addAll(m.get(i));
               }
            }
       }
       for(int i=-256;i<=256;++i){
           if(map.containsKey(i)){
               list.add(new ArrayList<>(map.get(i)));
           }
       }
       return list;
    }
}