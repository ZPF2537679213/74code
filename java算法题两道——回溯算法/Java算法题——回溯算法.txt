给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。
回文串 是正着读和反着读都一样的字符串。

示例 1：
输入：s = “aab”
输出：[[“a”,“a”,“b”],[“aa”,“b”]]

示例 2：
输入：s = “a”
输出：[[“a”]]
代码：
class Solution {
    List<List<String>>list=new ArrayList<>();
    public List<List<String>> partition(String s) {
        List<String>l=new ArrayList<>();
        part(s,l);
        return list;
    }
    public void part(String s,List<String>l){
        if(s.length()==0){//一条路径以便历完
            if(!l.isEmpty()){
                list.add(new ArrayList<>(l));
            }
            return;
        }
        for(int j=0;j<s.length();++j){
            String str=s.substring(0,j+1);
            if(trueOrFalse(s,0,j)){
                l.add(str);//是回文子串就入顺序表
                part(s.substring(j+1,s.length()),l);
                if(!l.isEmpty()){
                   l.remove(l.size()-1);//表示当前这个回文子串已经完成使命，出顺序表，回溯
                }
            }
        }
    }
    public boolean trueOrFalse(String s,int start,int end){
         if(start>end||s==null){
            return false;
        }
        while(start<end&&s.charAt(start)==s.charAt(end)){
            start++;
            end--;
        }
        if(start>=end){
            return true;
        }else{
            return false;
        }
    }
}
一个 「开心字符串」定义为：
仅包含小写字母 [‘a’, ‘b’, ‘c’].

对所有在 1 到 s.length - 1 之间的 i ，满足 s[i] != s[i + 1] （字符串的下标从 1 开始）。

比方说，字符串 “abc”，“ac”，“b” 和 “abcbabcbcb” 都是开心字符串，
但是 “aa”，“baa” 和 “ababbc” 都不是开心字符串。

给你两个整数 n 和 k ，你需要将长度为 n 的所有开心字符串按字典序排序。

请你返回排序后的第 k 个开心字符串，如果长度为 n 的开心字符串少于 k 个，那么请你返回 空字符串 。

示例 1：
输入：n = 1, k = 3
输出：“c”
解释：列表 [“a”, “b”, “c”] 包含了所有长度为 1 的开心字符串。按照字典序排序后第三个字符串为 “c” 。

示例 2：
输入：n = 1, k = 4
输出：""
解释：长度为 1 的开心字符串只有 3 个。

示例 3：
输入：n = 3, k = 9
输出：“cab”
解释：长度为 3 的开心字符串总共有 12 个 [“aba”, “abc”, “aca”, “acb”, “bab”, “bac”, “bca”, “bcb”, “cab”, “cac”, “cba”, “cbc”] 。第 9 个字符串为 “cab”
代码：
class Solution {
    List<String>list=new ArrayList<>();
    public String getHappyString(int n, int k) {
         getHappy(new StringBuilder(""),n);
        if(k>list.size()){
            return "";
        }
        return list.get(k-1);
    }
    public void getHappy(StringBuilder s,int n){
        if(s.length()==n){
            list.add(s.toString());
            return;
        }
        for(char x='a';x<='c';++x){
           if(s.length()==0||s.charAt(s.length()-1)!=x){
               s.append(x);
               getHappy(s,n);
                s.deleteCharAt(s.length()-1);
           }
        }
    }
}

