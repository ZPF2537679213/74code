给出一个三角形，计算从三角形顶部到底部的最小路径和，每一步都可以移动到下面一行相邻的数字，
例如，给出的三角形如下：
[[20],[30,40],[60,50,70],[40,10,80,30]]
最小的从顶部到底部的路径和是20 + 30 + 50 + 10 = 110。
注意：
如果你能只用O（N）的额外的空间来完成这项工作的话，就可以得到附加分，其中N是三角形中的行总数。
import java.util.ArrayList;
public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
       int len=triangle.size();
       int[][]end=new int[len][len];
       end[0][0]=triangle.get(0).get(0);
       for(int i=1;i<len;++i){
           for(int j=0;j<=i;++j){
               if(j==0){
                  end[i][j]=end[i-1][0]+triangle.get(i).get(0);
               }else if(i==j){
                 end[i][j]=end[i-1][j-1]+triangle.get(i).get(j);
              }else{
                  end[i][j]=Math.min(end[i-1][j],end[i-1][j-1])+triangle.get(i).get(j);
              }
           }
       }
       int minsum=Integer.MAX_VALUE;
       for(int i=0;i<len;++i){
          minsum=Math.min(minsum,end[len-1][i]);
       }
        return minsum;
    }
}
一个机器人在m×n大小的地图的左上角（起点）。
机器人每次向下或向右移动。机器人要到达地图的右下角（终点）。
可以有多少种不同的路径从起点走到终点？
import java.util.*;


public class Solution {
    /**
     * 
     * @param m int整型 
     * @param n int整型 
     * @return int整型
     */
    public int count=0;
    public int uniquePaths (int m, int n) {
        dfs(0,0,m,n,new boolean[m][n]);
        return count;
    }
    public void dfs(int x,int y,int m,int n,boolean[][]flag){
        if(x==m-1&&y==n-1){
           count++;
            return;
        }
        if(x==m||y==n||flag[x][y]){
          return;
        }
        flag[x][y]=true;
           dfs(x,y+1,m,n,flag);
           dfs(x+1,y,m,n,flag);
        flag[x][y]=false;
    }
    /*public int uniquePaths (int m, int n) {
       int[][]end=new int[m][n];
       if(m==1||n==1){
          return 1;
       }
        for(int i=0;i<m;++i){
           for(int j=0;j<n;++j){
               if(i==0){
                  end[i][j]=1;
               }else if(j==0){
                   end[i][j]=1;
               }else{
                   end[i][j]=end[i-1][j]+end[i][j-1];
               }
           }
        }
        return end[m-1][n-1];
    }*/
}
继续求路径。
如果在图中加入了一些障碍，有多少不同的路径？
分别用0和1代表空区域和障碍
例如
下图表示有一个障碍在3*3的图中央。
[
    [0,0,0],
    [0,1,0],
    [0,0,0]
]
有2条不同的路径
备注：m和n不超过100.
import java.util.*;


public class Solution {
    /**
     * 
     * @param obstacleGrid int整型二维数组 
     * @return int整型
     */
    /*public int count=0;
    public int uniquePathsWithObstacles (int[][] obstacleGrid) {
        dfs(0,0,obstacleGrid.length,obstacleGrid[0].length,obstacleGrid);
        return count;
    }
    public void dfs(int x,int y,int m,int n,int[][]obs){
        if(x==m-1&&y==n-1){
           count++;
            return;
        }
        if(x==m||y==n||obs[x][y]!=0){
           return;
        }
        obs[x][y]=1;
        dfs(x+1,y,m,n,obs);
        dfs(x,y+1,m,n,obs);
        obs[x][y]=0;
    }*/
     public int uniquePathsWithObstacles (int[][] obstacleGrid) {
         int m=obstacleGrid.length;
         int n=obstacleGrid[0].length;
        int[][]end=new int[m][n];
         boolean cow=false;
         for(int i=0;i<m;++i){
            if(obstacleGrid[i][0]==1){
               cow=true;
            }else{
                if(!cow){
                   end[i][0]=1;
                }
            }
         }
         boolean col=false;
         for(int i=0;i<n;++i){
             if(obstacleGrid[0][i]==1){
                col=true;
             }else{
                 if(!col){
                    end[0][i]=1;
                 }
             }
         }
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
              if(obstacleGrid[i][j]==0){
                 end[i][j]=end[i-1][j]+end[i][j-1];
              }
            }
        }
         return end[m-1][n-1];
    }
}
给定一个由非负整数填充的m x n的二维数组，现在要从二维数组的左上角走到右下角，请找出路径上的所有数字之和最小的路径。
注意：你每次只能向下或向右移动。
import java.util.*;


public class Solution {
    /**
     * 
     * @param grid int整型二维数组 
     * @return int整型
     */
    public int minPathSum (int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        for(int i=1;i<m;++i){
            grid[i][0]+=grid[i-1][0];
        }
        for(int j=1;j<n;++j){
           grid[0][j]+=grid[0][j-1];
        }
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                grid[i][j]=Math.min(grid[i-1][j],grid[i][j-1])+grid[i][j];
            }
        }
        return grid[m-1][n-1];
    }
}