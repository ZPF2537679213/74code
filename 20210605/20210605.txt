描述
请写一个整数计算器，支持加减乘三种运算和括号。
示例1
输入：
"1+2"
返回值：
3
示例2
输入：
"(2*(3-4))*5"
返回值：
-10
示例3
输入：
"3+2*3*4-1"
返回值：
26
import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 返回表达式的值
     * @param s string字符串 待计算的表达式
     * @return int整型
     */
    public int solve (String s) {
        s=nibolan(s);
        Stack<String>stack=new Stack<>();
        String[]ss=s.trim().split(" ");
        for(int i=0;i<ss.length;++i){
            if(ss[i].equals("+")||ss[i].equals("-")||ss[i].equals("*")||ss[i].equals("/")){
             int b=Integer.valueOf(stack.pop());
             int a=Integer.valueOf(stack.pop());
             if(ss[i].equals("+")){
               stack.push(a+b+"");
             }else if(ss[i].equals("-")){
                 stack.push(a-b+"");
             }else if(ss[i].equals("*")){
                 stack.push(a*b+"");
             }else{
                 stack.push(a/b+"");
             }
            }else{
               stack.push(ss[i]);
            }
        }
       return Integer.valueOf(stack.peek());
    }
    public String nibolan(String s){
        Stack<String>s1=new Stack<>();
        Stack<String>s2=new Stack<>();
        int i=0;
        while(i<s.length()){
            char x=s.charAt(i);
               if(x=='('){
                   s1.push(x+"");
               } else if(x=='-'||x=='+'){
                if(x=='-'&&i>0&&s.charAt(i-1)=='('){
                  s2.push(0+"");
                }
                  if(s1.isEmpty()||s1.peek().equals("(")){
                        s1.push(x+"");
                  }else{
                     s2.push(s1.pop());
                      continue;
                  }
            }else if(x=='*'||x=='/'){
                   if(s1.isEmpty()||s1.peek().equals("(")||s1.peek().equals("+")||s1.peek().equals("-")){
                      s1.push(x+"");
                   }else{
                       s2.push(s1.pop());
                       continue;
                   }
                      
            }else if(x==')'){
                while(!s1.peek().equals("(")){
                    s2.push(s1.pop());
                }
                if(!s1.isEmpty()){
                   s1.pop();
                }
            }else{
                int j=i;
                while(i<s.length()&&s.charAt(i)>='0'&&s.charAt(i)<='9'){
                    i++;
                }
                String y=s.substring(j,i);
                s2.push(y);
                i--;
            }
            i++;
        }
        StringBuilder ss=new StringBuilder();
            while(!s2.isEmpty()){
                s1.push(s2.pop());
            }
           while(!s1.isEmpty()){
               ss.append(s1.pop()+" ");
           }
        return ss.toString();
    }
}
描述
分别按照二叉树先序，中序和后序打印所有的节点。
示例1
输入：
{1,2,3}
返回值：
[[1,2,3],[2,1,3],[2,3,1]]
import java.util.*;

/*
 * public class TreeNode {
 *   int val = 0;
 *   TreeNode left = null;
 *   TreeNode right = null;
 * }
 */

public class Solution {
    /**
     * 
     * @param root TreeNode类 the root of binary tree
     * @return int整型二维数组
     */
    public static ArrayList<ArrayList<Integer>>list=new ArrayList<>(3);
    static{
        for(int i=0;i<3;++i){
           list.add(new ArrayList<>());
        }
    }
    public int[][] threeOrders (TreeNode root) {
        three(root);
        int[][]end=new int[3][list.get(0).size()];
       for(int i=0;i<3;++i){
          for(int j=0;j<list.get(i).size();++j){
              end[i][j]=list.get(i).get(j);
          }
          list.get(i).clear();
       }
        return end;
    }
    public void three(TreeNode root){
        if(root==null){
          return;
        }
        list.get(0).add(root.val);
        three(root.left);
        list.get(1).add(root.val);
        three(root.right);
        list.get(2).add(root.val);
    }
}
描述
给定一个数组，请你编写一个函数，返回该数组排序后的形式。
示例1
输入：
[5,2,3,1,4]
复制
返回值：
[1,2,3,4,5]
示例2
输入：
[5,1,6,2,5]
返回值：
[1,2,5,5,6]
import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 将给定数组排序
     * @param arr int整型一维数组 待排序的数组
     * @return int整型一维数组
     */
    public int[] MySort (int[] arr) {
      quickSort(arr,0,arr.length-1);
      return arr;
    }
    public void quickSort(int[]arr,int start,int end){
        if(start>=end){
          return;
        }
        int left=start;
        int right=end;
        int tmp=arr[start];
        while(start<end){
            while(start<end&&arr[end]>=tmp){
                end--;
            }
            arr[start]=arr[end];
            while(start<end&&arr[start]<=tmp){
                start++;
            }
            arr[end]=arr[start];
        }
        arr[start]=tmp;
        quickSort(arr,left,start-1);
        quickSort(arr,start+1,right);
    }
}

