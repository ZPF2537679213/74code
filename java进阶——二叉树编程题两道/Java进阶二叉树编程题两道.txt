输入一棵二叉树的根节点，判断该树是不是平衡二叉树。
如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。

?


示例 1:


给定二叉树 [3,9,20,null,null,15,7]

    
  3
   
 / \
  
9  20
    
    /  \
   
  15   7

返回 true 。


示例 2:


给定二叉树 [1,2,2,3,3,null,null,4,4]

       
      1
      
     / \
     
    2   2
    
   / \
   
  3   3
  
 /  \

4   4

返回?false 。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof
代码：
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null){
            return true;
        } 
        return isBalanced(root.left)&&isBalanced(root.right)&&Math.abs(path(root.left)-path(root.right))<=1;
    }
    public int path(TreeNode root){
        if(root==null){
            return 0;
        }
        return Math.max(path(root.left),path(root.right))+1;
    }
}
输入一棵二叉树的根节点，求该树的深度。
从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，
最长路径的长度为树的深度。


例如：

给定二叉树 [3,9,20,null,null,15,7]，

    
  3
   
 / \
  
9  20
    
   /  \
   
15   7

返回它的最大深度?3 。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof
代码：
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
}