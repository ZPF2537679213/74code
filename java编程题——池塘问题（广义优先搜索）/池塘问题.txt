你有一个用于表示一片土地的整数矩阵land，该矩阵中每个点的值代表对应地点的海拔高度。
若值为0则表示水域。由垂直、水平或对角连接的水域为池塘。
池塘的大小是指相连接的水域的个数。
编写一个方法来计算矩阵中所有池塘的大小，返回值需要从小到大排序。


示例：


输入：
[
  [0,2,1,0],
  [0,1,0,1],
  [1,1,0,1],
  [0,1,0,1]
]

输出： [1,2,4]


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/pond-sizes-lcci

代码：
class Solution {
    int[][] num=new int[][]{{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
    public int[] pondSizes(int[][] land) {
      List<Integer>list=new ArrayList<>();
       for(int i=0;i<land.length;++i){
           for(int j=0;j<land[i].length;++j){
              int x=sizes(land,i,j);
              if(x!=0){
                  list.add(x);
              }
           }
       }
       Collections.sort(list);
       int[]n=new int[list.size()];
       for(int i=0;i<n.length;++i){
           n[i]=list.get(i);
       }
        return n;
    }
    public int sizes(int[][]land,int x,int y){
        if(x<0||y<0||x>=land.length||y>=land[0].length){
            return 0;
        }
        int size=0;
        if(land[x][y]!=0){
            return 0;
        }else{
            size++;
            land[x][y]=-1;
        }
        for(int i=0;i<num.length;++i){
            int nx=x+num[i][0];
            int ny=y+num[i][1];
            if(nx>=0&&nx<land.length&&ny>=0&&ny<land[0].length){
                size+=sizes(land,nx,ny); 
            }
        }
        return size;
    }
}