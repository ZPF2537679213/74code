链接：https://www.nowcoder.com/questionTerminal/5a0a2c7e431e4fbbbb1ff32ac6e8dfa0
来源：
牛客网

洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 
现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。
首先，
我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。
在洗牌过程中按顺序放下了6,3,5,2,4,1。
把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，
就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，
请输出这副牌洗牌k次之后从上往下的序列。


输入描述:
第一行一个数T(T ≤ 100)，表示数据组数。
对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，
接下来有2n行个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。
表示原始牌组从上到下的序列。


输出描述:
对于每组数据，
输出一行，最终的序列。数字之间用空格隔开，
不要在行末输出多余的空格。

示例1

输入

3
3 1
1
2
3
4
5
6
3 2
1
2
3
4
5
6
2 2
1
1
1
1

输出

1 4 2 5 3 6

1 5 4 3 2 6

1 1 1 1
import java.util.*;
public class Main{
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        while(sc.hasNext()){
            int T=sc.nextInt();
            if(T<=0){
               break;
            }
            List<List<Integer>>list=new ArrayList<>();
            while(T>0){
            int n=sc.nextInt();
            int k=sc.nextInt();
            List<Integer>l=new ArrayList<>();
            for(int i=0;i<2*n;++i){
                int x=sc.nextInt();
                l.add(x);
            }
             sort(k,l);
             list.add(new ArrayList<>(l));
                T--;
            }
           
            for(List<Integer>x:list){
                 String end="";
                for(int y:x){
                    end+=y+" ";
                }
                 end=end.trim();
                System.out.println(end);
            }
        }
    }
    public static void sort(int k,List<Integer>l){
        while(k>0){
            Stack<Integer>stack=new Stack<>();
            int left=l.size()/2-1;
            int right=l.size()-1;
            while(left>=0&&right>left){
                int ll=l.get(left);
                int rr=l.get(right);
                stack.push(rr);
                stack.push(ll);
                left--;
                right--;
            }
            l.clear();
            while(!stack.isEmpty()){
                int x=stack.pop();
                l.add(x);
            }
            k--;
        }
    }
}
字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。

?

示例：

输入：S = "ababcbacadefegdehijhklij"
输出：[9,7,8]
解释：
划分结果为 "ababcbaca", "defegde", "hijhklij"。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-labels
class Solution {
    public List<Integer> partitionLabels(String s) {
        List<Integer>list=new ArrayList<>();
        int[]let=new int[26];
        for(int i=0;i<s.length();++i){
            let[s.charAt(i)-'a']=i;
        }
        int i=0,indexMax=0,pre=0;
        while(i<s.length()){
            if(i<=indexMax){
                indexMax=Math.max(indexMax,let[s.charAt(i)-'a']);
            }
            if(i==indexMax){
                list.add(indexMax-pre+1);
                pre=i+1;
                indexMax++;
            }
            i++;
        }
        return list;
    }
}
给你一个整数 n，请返回长度为 n 、仅由元音 (a, e, i, o, u) 组成且按 字典序排列 的字符串数量。

字符串 s 按 字典序排列 需要满足：对于所有有效的 i，s[i] 在字母表中的位置总是与 s[i+1] 相同或在 s[i+1] 之前。

?

示例 1：

输入：n = 1
输出：5
解释：仅由元音组成的 5 个字典序字符串为 ["a","e","i","o","u"]
示例 2：

输入：n = 2
输出：15
解释：仅由元音组成的 15 个字典序字符串为
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"]
注意，"ea" 不是符合题意的字符串，因为 'e' 在字母表中的位置比 'a' 靠后


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-sorted-vowel-strings
class Solution {
    public int count=0;
    public String str="aeiou";
    public int countVowelStrings(int n) {
        countVowel(0,"",n);
        return count;
    }
    public void countVowel(int index,String s,int n){
        if(n==s.length()){
            count++;
            return;
        }
        for(int i=0;i<5;++i){
            char x=str.charAt(i);
            if(index<=i){
                 countVowel(i,s+x,n);
            }          
        }
    }
}
给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:

输入:?n = 4, k = 2
输出:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/combinations
class Solution {
    public  List<List<Integer>>list=new ArrayList<>();
    public List<List<Integer>> combine(int n, int k) {
        comb(1,n,new ArrayList<>(),k);
        return list;
    }
    public void comb(int index,int n,List<Integer>l,int k){
        if(l.size()==k){
            list.add(new ArrayList<>(l));
            return;
        }
        for(int i=index;i<=n;++i){
            l.add(i);
            comb(i+1,n,l,k);
            l.remove(l.size()-1);
        }
    }
}
给你两个链表?list1 和?list2?，它们包含的元素分别为?n 个和?m 个。

请你将?list1?中第?a?个节点到第?b?个节点删除，并将list2?接在被删除节点的位置。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-in-between-linked-lists
/** * Definition for singly-linked list.
  class ListNode {
      int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  }
class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        int k=0;
        ListNode fast=list1;
        while(k<b+1){
            fast=fast.next;
            k++;
        }
        k=0;
        ListNode slow=list1;
        while(k<a-1){
            slow=slow.next;
            k++;
        }
        slow.next=list2;
        while(list2.next!=null){
            list2=list2.next;
        }
        list2.next=fast;
        return list1;
    }
}