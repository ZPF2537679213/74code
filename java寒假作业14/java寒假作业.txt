给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。


示例:

输入:?[1,2,3,null,5,null,4]
输出:?[1, 3, 4]

 				  解释:

   1            <---
 
                                                                          /   \

				        2     3         <---
 
                                                                        \       \
  
                                                                         5     4  
class Solution {
     List<Integer>list=new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
   firstShow(root);
    return this.list;
    }
    public void firstShow(TreeNode root){
    Queue<TreeNode>queue=new LinkedList<>();
    queue.offer(root);
    while(!queue.isEmpty()){
    int len=queue.size();
    for(int i=0;i<len;++i){
    TreeNode cur=queue.poll();
    if(cur!=null&&cur.left!=null){
     queue.offer(cur.left);
    }
    if(cur!=null&&cur.right!=null){
    queue.offer(cur.right);
    }
    if(cur!=null&&i==len-1){
    this.list.add(cur.val);
    }
    }
    }
    }
}
 给定一个字符串?(s) 和一个字符模式?(p) ，实现一个支持?'?'?和?'*'?的通配符匹配。


'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。

两个字符串完全匹配才算匹配成功。


说明:

s?可能为空，且只包含从?a-z?的小写字母。
p?可能为空，且只包含从?a-z?的小写字母，
以及字符???和?*。

示例?1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
class Solution {
    public boolean isMatch(String s, String p) {
     int i=0,j=0,newI=-1,newJ=-1;
     while(i<s.length()){
     if(j<p.length()&&s.charAt(i)==p.charAt(j)||j<p.length()&&p.charAt(j)=='?'){
     i++;
     j++;
     }else if(j<p.length()&&p.charAt(j)=='*'){
      newI=i;
      newJ=j++;//保存*号的位置以及更新*号的位置
     }else if(newJ>-1){
      i=++newI;
      j=newJ+1;//回溯
     }else{
         return false;
     }
     }
     while(j<p.length()){
     if(p.charAt(j)!='*'){
      return false;
     }
     j++;
     }
     return true;
    }
}