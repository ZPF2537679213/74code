题目描述
按照指定规则对输入的字符串进行处理。
详细描述：
将输入的两个字符串合并。
对合并后的字符串进行排序，要求为：下标为奇数的字符和下标为偶数的字符分别从小到大排序。这里的下标意思是字符在字符串中的位置。
对排序后的字符串进行操作，如果字符为‘0’――‘9’或者‘A’――‘F’或者‘a’――‘f’，则对他们所代表的16进制的数进行BIT倒序的操作，并转换为相应的大写字符。如字符为‘4’，为0100b，则翻转后为0010b，也就是2。转换后的字符为‘2’； 如字符为‘7’，为0111b，则翻转后为1110b，也就是e。转换后的字符为大写‘E’。
举例：输入str1为"dec"，str2为"fab"，合并为“decfab”，分别对“dca”和“efb”进行排序，排序后为“abcedf”，转换后为“5D37BF”
注意本题含有多组样例输入
输入描述:
本题含有多组样例输入。每组样例输入两个字符串，用空格隔开。
输出描述:
输出转化后的结果。每组样例输出一行。
示例1
输入
dec fab
输出
5D37BF
代码：
import java.util.*;
public class Main{
    public static void main(String[]args){
        Scanner input=new Scanner(System.in);
        while(input.hasNext()){
        String str1=input.next();
        String str2=input.next();
        StringBuilder str=new StringBuilder();
        str.append(str1);
        str.append(str2);
        for(int i=2;str.length()>2&&i<str.length();++i){
            char tmp=str.charAt(i);
            int j;
            for(j=i-2;j>=0&&j<str.length()&&str.charAt(j)>tmp;j-=2){
                char x=str.charAt(j);
                str.setCharAt(j+2,x);
            }
            str.setCharAt(j+2,tmp);
        }
        System.out.println(change(str.toString()));
        }
    }
    public static String change(String str){
        StringBuilder ss=new StringBuilder();
        for(int i=0;i<str.length();++i){
            char ch=str.charAt(i);
            if(ch>='0'&&ch<='9'){
                int x=ch-'0';
                x=exchange(x);
                if(x>=10){
                    ch=(char)(x-10+'A');
                }else{
                    ch=(char)(x+'0');
                }
            }else if(ch>='A'&&ch<='F'){
                int x=ch-'A'+10;
                x=exchange(x);
                if(x>=10){
                    ch=(char)(x-10+'A');
                }else{
                    ch=(char)(x+'0');
                }
            }else if(ch>='a'&&ch<='f'){
                int x=ch-'a'+10;
                x=exchange(x);
                if(x>=10){
                    ch=(char)(x-10+'A');
                }else{
                    ch=(char)(x+'0');
                }
            }
            ss.append(ch);
        }
        return ss.toString();
    }
    public static int exchange(int n){
        int sum=0;
        Stack<Integer>stack=new Stack<>();
        for(int i=0;i<4;++i){
            stack.push(n&1);
            n=n>>1;
        }
        for(int i=0;i<4;++i){
            int x=stack.pop();
            sum+=x*(int)Math.pow(2,i);
        }
     return sum;
    }
}
