输入两个链表，找出它们的第一个公共节点。
如下面的两个链表：
输入：
intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3

输出：Reference of the node with value = 8

输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof

代码：
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode h1=headA;
        ListNode h2=headB;
        while(h1!=h2){
            if(h1!=null){
                h1=h1.next;
            }else{
                h1=headB;
            }
            if(h2!=null){
                h2=h2.next;
            }else{
                h2=headA;
            }
        }
        return h1;
    }
}
给定一个单链表?L：L0→L1→…→Ln-1→Ln ，

将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…


你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。


示例?1:


给定链表 1->2->3->4, 
重新排列为 1->4->2->3.

示例 2:

给定链表 1->2->3->4->5, 
重新排列为 1->5->2->4->3.


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reorder-list

代码：
class Solution {
    public void reorderList(ListNode head) {
     reorder(head);
    }
    public void reorder(ListNode first){
      if(first==null||first.next==null){
          return;
      }
     ListNode end=first;
    while(end.next.next!=null){
        end=end.next;
    }
     if(end==first){
         return;
     }
     ListNode cur=first.next;
     first.next=end.next;
     end.next.next=cur;
     end.next=null;
     first=cur;
     reorder(first);
    }
}